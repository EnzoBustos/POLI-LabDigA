// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/11/2022 09:55:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          FD_relogio
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FD_relogio_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Define;
reg Incrementa;
reg Min_Seg_Prog_0;
reg Min_Seg_Prog_1;
reg Min_Seg_Prog_2;
reg Min_Seg_Prog_3;
reg Min_Seg_Prog_4;
reg Min_Seg_Prog_5;
reg Min_Seg_Prog_6;
reg Min_Seg_Prog_7;
reg Min_Seg_Prog_8;
reg Min_Seg_Prog_9;
reg Min_Seg_Prog_10;
reg Min_Seg_Prog_11;
reg Min_Seg_Prog_12;
reg Min_Seg_Prog_13;
reg Zera;
// wires                                               
wire Min_Seg_Real_0;
wire Min_Seg_Real_1;
wire Min_Seg_Real_2;
wire Min_Seg_Real_3;
wire Min_Seg_Real_4;
wire Min_Seg_Real_5;
wire Min_Seg_Real_6;
wire Min_Seg_Real_7;
wire Min_Seg_Real_8;
wire Min_Seg_Real_9;
wire Min_Seg_Real_10;
wire Min_Seg_Real_11;
wire Min_Seg_Real_12;
wire Min_Seg_Real_13;

// assign statements (if any)                          
FD_relogio i1 (
// port map - connection between master ports and signals/registers   
	.Define(Define),
	.Incrementa(Incrementa),
	.Min_Seg_Prog_0(Min_Seg_Prog_0),
	.Min_Seg_Prog_1(Min_Seg_Prog_1),
	.Min_Seg_Prog_2(Min_Seg_Prog_2),
	.Min_Seg_Prog_3(Min_Seg_Prog_3),
	.Min_Seg_Prog_4(Min_Seg_Prog_4),
	.Min_Seg_Prog_5(Min_Seg_Prog_5),
	.Min_Seg_Prog_6(Min_Seg_Prog_6),
	.Min_Seg_Prog_7(Min_Seg_Prog_7),
	.Min_Seg_Prog_8(Min_Seg_Prog_8),
	.Min_Seg_Prog_9(Min_Seg_Prog_9),
	.Min_Seg_Prog_10(Min_Seg_Prog_10),
	.Min_Seg_Prog_11(Min_Seg_Prog_11),
	.Min_Seg_Prog_12(Min_Seg_Prog_12),
	.Min_Seg_Prog_13(Min_Seg_Prog_13),
	.Min_Seg_Real_0(Min_Seg_Real_0),
	.Min_Seg_Real_1(Min_Seg_Real_1),
	.Min_Seg_Real_2(Min_Seg_Real_2),
	.Min_Seg_Real_3(Min_Seg_Real_3),
	.Min_Seg_Real_4(Min_Seg_Real_4),
	.Min_Seg_Real_5(Min_Seg_Real_5),
	.Min_Seg_Real_6(Min_Seg_Real_6),
	.Min_Seg_Real_7(Min_Seg_Real_7),
	.Min_Seg_Real_8(Min_Seg_Real_8),
	.Min_Seg_Real_9(Min_Seg_Real_9),
	.Min_Seg_Real_10(Min_Seg_Real_10),
	.Min_Seg_Real_11(Min_Seg_Real_11),
	.Min_Seg_Real_12(Min_Seg_Real_12),
	.Min_Seg_Real_13(Min_Seg_Real_13),
	.Zera(Zera)
);
initial 
begin 
#1000000 $finish;
end 

// Incrementa
initial
begin
	repeat(8)
	begin
		Incrementa = 1'b0;
		Incrementa = #10000 1'b1;
		# 10000;
	end
	Incrementa = 1'b0;
	Incrementa = #60000 1'b1;
	# 10000;
	repeat(4)
	begin
		Incrementa = 1'b0;
		Incrementa = #10000 1'b1;
		# 10000;
	end
	Incrementa = 1'b0;
end 

// Define
initial
begin
	Define = 1'b1;
	Define = #170000 1'b0;
	Define = #20000 1'b1;
end 

// Zera
initial
begin
	Zera = 1'b1;
	Zera = #140000 1'b0;
	Zera = #20000 1'b1;
end 

// Min_Seg_Prog_13
initial
begin
	Min_Seg_Prog_13 = 1'b1;
end 

// Min_Seg_Prog_12
initial
begin
	Min_Seg_Prog_12 = 1'b0;
end 

// Min_Seg_Prog_11
initial
begin
	Min_Seg_Prog_11 = 1'b1;
end 

// Min_Seg_Prog_10
initial
begin
	Min_Seg_Prog_10 = 1'b1;
end 

// Min_Seg_Prog_9
initial
begin
	Min_Seg_Prog_9 = 1'b0;
end 

// Min_Seg_Prog_8
initial
begin
	Min_Seg_Prog_8 = 1'b0;
end 

// Min_Seg_Prog_7
initial
begin
	Min_Seg_Prog_7 = 1'b1;
end 

// Min_Seg_Prog_6
initial
begin
	Min_Seg_Prog_6 = 1'b1;
end 

// Min_Seg_Prog_5
initial
begin
	Min_Seg_Prog_5 = 1'b0;
end 

// Min_Seg_Prog_4
initial
begin
	Min_Seg_Prog_4 = 1'b1;
end 

// Min_Seg_Prog_3
initial
begin
	Min_Seg_Prog_3 = 1'b1;
end 

// Min_Seg_Prog_2
initial
begin
	Min_Seg_Prog_2 = 1'b0;
end 

// Min_Seg_Prog_1
initial
begin
	Min_Seg_Prog_1 = 1'b0;
end 

// Min_Seg_Prog_0
initial
begin
	Min_Seg_Prog_0 = 1'b0;
end 
endmodule

